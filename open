(async () => {
    const sleep = ms => new Promise(r => setTimeout(r, ms));
    let stop = false, opened = 0, unique = 'NONE';
    const unlocks = { "Uncommon": {}, "Rare": {}, "Epic": {}, "Legendary": {}, "Chroma": {}, "Mystical": {} };
    const rarityColors = {
        "Uncommon": "#27ae60", "Rare": "#3498db", "Epic": "#8e44ad",
        "Legendary": "#e67e22", "Chroma": "#f1c40f", "Mystical": "#e74c3c"
    };

    // Fetch available capsules
    const capsuleData = await fetch('/data/trians', {
        headers: {
            'Accept': 'application/json',
            'authorization': triangulet.tokenraw,
            'Content-Type': 'application/json'
        }
    }).then(res => res.json());

    const packOptions = capsuleData.ValuesnCapsules.map(x => x.name);

    // Prompt for capsule + quantity
    const pack = prompt(`Which capsule to open?\nOptions:\n${packOptions.join(', ')}`);
    if (!pack || !packOptions.includes(pack)) return alert("Invalid pack selection");

    const quantity = parseInt(prompt("How many to open? Leave blank or 0 for infinite")) || Infinity;

    // UI box
    const box = document.createElement('div');
    Object.assign(box.style, {
        position: 'fixed', top: '10px', right: '10px', width: '300px',
        background: '#f2f2f2', border: '2px solid #aaa', borderRadius: '12px',
        padding: '15px', fontFamily: 'Nunito, sans-serif', zIndex: 10000,
        boxShadow: '0 0 10px rgba(0,0,0,0.4)', overflowY: 'auto', maxHeight: '90vh'
    });
    box.innerHTML = `<h3>Capsule: ${pack}</h3>
        <button id="stopBtn" style="background:#c0392b;color:white;border:none;padding:8px 12px;margin-bottom:10px;border-radius:6px;cursor:pointer">Stop Opener</button>
        <div id="summary" style="font-size:14px"></div>`;
    document.body.appendChild(box);
    dragElement(box);

    document.getElementById("stopBtn").onclick = () => stop = !stop;

    // Opener loop
    for (let i = 0; i < quantity && !stop; i++) {
        const res = await fetch('/api/open', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'authorization': triangulet.tokenraw,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ capsule: pack })
        }).then(r => r.json()).catch(() => null);

        if (!res || !res.trian) continue;
        const { rarity, trian } = res;
        if (res.new) unique = trian;
        unlocks[rarity][trian] = (unlocks[rarity][trian] || 0) + 1;
        opened++;

        updateDisplay();
        await sleep(1150);
    }

    function updateDisplay() {
        const container = document.getElementById("summary");
        container.innerHTML = `<p><strong>Total Opened:</strong> ${opened}</p>
            <p><strong>Recent Unique:</strong> ${unique}</p>`;
        for (const rarity in unlocks) {
            const entries = unlocks[rarity];
            if (Object.keys(entries).length === 0) continue;
            container.innerHTML += `<h4 style="color:${rarityColors[rarity]};margin-bottom:2px">${rarity}</h4>`;
            for (const trian in entries) {
                const count = entries[trian];
                container.innerHTML += `<p style="margin:2px 0 2px 8px">${trian}: ${count}</p>`;
            }
        }
    }

    document.addEventListener('keydown', e => {
        if (e.ctrlKey && e.altKey && e.key.toLowerCase() === 'd') {
            stop = true;
            alert("Opening stopped via Ctrl+Alt+D");
        }
    });

    // Drag support
    function dragElement(elmnt) {
        let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
        elmnt.onmousedown = dragMouseDown;
        function dragMouseDown(e) {
            e.preventDefault(); pos3 = e.clientX; pos4 = e.clientY;
            document.onmouseup = closeDragElement;
            document.onmousemove = elementDrag;
        }
        function elementDrag(e) {
            e.preventDefault();
            pos1 = pos3 - e.clientX; pos2 = pos4 - e.clientY;
            pos3 = e.clientX; pos4 = e.clientY;
            elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
            elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
        }
        function closeDragElement() {
            document.onmouseup = null;
            document.onmousemove = null;
        }
    }
})();
``
''
